// Chinchilla - The Image Generation Specialist
// A dedicated AI assistant that focuses purely on image generation
// Takes recommendations from Jammy AI and creates visual content

export interface ChinchillaRequest {
  prompt: string;
  industry: string;
  contentType: string;
  style: string;
  recommendations: string;
}

export interface ChinchillaResponse {
  success: boolean;
  imageUrl: string;
  title: string;
  description: string;
  generatedAt: string;
}

class ChinchillaImageAI {
  // Generate any image based on Jammy's recommendations
  async generateImage(request: ChinchillaRequest): Promise<ChinchillaResponse> {
    try {
      console.log('üé® Chinchilla generating image for:', request.industry);
      console.log('üìù Request details:', request);
      
      // Create a simple but effective image using a basic approach
      const imageUrl = await this.createSimpleImage(request);
      
      console.log('‚úÖ Chinchilla generated image URL:', imageUrl.substring(0, 100) + '...');
      console.log('üìè Image URL length:', imageUrl.length);
      
      return {
        success: true,
        imageUrl: imageUrl,
        title: `${request.industry} ${request.contentType}`,
        description: `Visual representation for ${request.industry} sector based on Jammy's recommendations`,
        generatedAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('‚ùå Chinchilla image generation failed:', error);
      return {
        success: false,
        imageUrl: '',
        title: 'Image Generation Failed',
        description: 'Unable to generate image at this time',
        generatedAt: new Date().toISOString()
      };
    }
  }

  private async createSimpleImage(request: ChinchillaRequest): Promise<string> {
    // Create a more sophisticated image based on Jammy's detailed prompt
    const width = 400;
    const height = 300;
    const color = this.getIndustryColor(request.industry);
    
    // Parse the prompt to understand what to draw
    const prompt = request.prompt.toLowerCase();
    const visualElements = this.parseVisualElements(prompt);
    
    console.log('üé® Chinchilla creating image with elements:', visualElements);
    
    // Create a more sophisticated SVG based on the prompt
    const svg = this.createAdvancedSVG(width, height, color, visualElements, request);
    
    // Convert to base64 data URL
    const base64 = Buffer.from(svg).toString('base64');
    return `data:image/svg+xml;base64,${base64}`;
  }

  private parseVisualElements(prompt: string): string[] {
    const elements = [];
    
    if (prompt.includes('smartphone') || prompt.includes('phone')) {
      elements.push('phone');
    }
    if (prompt.includes('chinchilla')) {
      elements.push('chinchilla');
    }
    if (prompt.includes('building') || prompt.includes('office')) {
      elements.push('building');
    }
    if (prompt.includes('people') || prompt.includes('team')) {
      elements.push('people');
    }
    if (prompt.includes('chart') || prompt.includes('graph')) {
      elements.push('chart');
    }
    if (prompt.includes('network')) {
      elements.push('network');
    }
    
    return elements;
  }

  private createAdvancedSVG(width: number, height: number, color: string, elements: string[], request: ChinchillaRequest): string {
    let svg = `<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">`;
    
    // Background
    svg += `<rect width="${width}" height="${height}" fill="#${color}"/>`;
    
    // Main content area
    svg += `<rect x="20" y="20" width="${width-40}" height="${height-40}" fill="white" stroke="#333" stroke-width="2" rx="8"/>`;
    
    // Add visual elements based on the prompt
    if (elements.includes('phone')) {
      svg += this.drawPhone(width/2 - 30, height/2 - 40);
    }
    if (elements.includes('chinchilla')) {
      svg += this.drawChinchilla(width/2 + 20, height/2 - 30);
    }
    if (elements.includes('building')) {
      svg += this.drawBuilding(50, height/2 - 20);
    }
    if (elements.includes('people')) {
      svg += this.drawPeople(50, height/2 + 20);
    }
    if (elements.includes('chart')) {
      svg += this.drawChart(width - 100, height/2 - 20);
    }
    if (elements.includes('network')) {
      svg += this.drawNetwork(width - 80, height/2 + 20);
    }
    
    // If no specific elements, show industry content
    if (elements.length === 0) {
      svg += `<text x="${width/2}" y="${height/2-20}" font-family="Arial" font-size="24" font-weight="bold" text-anchor="middle" fill="#333">${request.industry.toUpperCase()}</text>`;
      svg += `<text x="${width/2}" y="${height/2+10}" font-family="Arial" font-size="16" text-anchor="middle" fill="#666">${request.contentType}</text>`;
    }
    
    // Footer
    svg += `<text x="${width/2}" y="${height-10}" font-family="Arial" font-size="12" text-anchor="middle" fill="#999">Generated by Chinchilla AI</text>`;
    
    svg += `</svg>`;
    return svg;
  }

  private drawPhone(x: number, y: number): string {
    return `
      <rect x="${x}" y="${y}" width="60" height="100" fill="#333" rx="8"/>
      <rect x="${x+5}" y="${y+10}" width="50" height="70" fill="#000"/>
      <circle cx="${x+30}" cy="${y+85}" r="8" fill="#666"/>
    `;
  }

  private drawChinchilla(x: number, y: number): string {
    return `
      <ellipse cx="${x}" cy="${y}" rx="25" ry="15" fill="#8B4513"/>
      <circle cx="${x-15}" cy="${y-5}" r="3" fill="#000"/>
      <circle cx="${x+15}" cy="${y-5}" r="3" fill="#000"/>
      <ellipse cx="${x}" cy="${y+5}" rx="8" ry="4" fill="#000"/>
    `;
  }

  private drawBuilding(x: number, y: number): string {
    return `
      <rect x="${x}" y="${y}" width="40" height="60" fill="#666"/>
      <rect x="${x+5}" y="${y+5}" width="30" height="10" fill="#999"/>
      <rect x="${x+5}" y="${y+20}" width="30" height="10" fill="#999"/>
      <rect x="${x+5}" y="${y+35}" width="30" height="10" fill="#999"/>
    `;
  }

  private drawPeople(x: number, y: number): string {
    return `
      <circle cx="${x}" cy="${y}" r="8" fill="#FFDBAC"/>
      <rect x="${x-6}" y="${y+8}" width="12" height="20" fill="#4A90E2"/>
      <circle cx="${x+15}" cy="${y}" r="8" fill="#FFDBAC"/>
      <rect x="${x+9}" y="${y+8}" width="12" height="20" fill="#4A90E2"/>
    `;
  }

  private drawChart(x: number, y: number): string {
    return `
      <rect x="${x}" y="${y}" width="60" height="40" fill="#f0f0f0" stroke="#333"/>
      <rect x="${x+5}" y="${y+30}" width="8" height="10" fill="#e30613"/>
      <rect x="${x+15}" y="${y+20}" width="8" height="20" fill="#e30613"/>
      <rect x="${x+25}" y="${y+15}" width="8" height="25" fill="#e30613"/>
      <rect x="${x+35}" y="${y+25}" width="8" height="15" fill="#e30613"/>
    `;
  }

  private drawNetwork(x: number, y: number): string {
    return `
      <circle cx="${x}" cy="${y}" r="5" fill="#e30613"/>
      <circle cx="${x+20}" cy="${y-10}" r="5" fill="#e30613"/>
      <circle cx="${x+40}" cy="${y+5}" r="5" fill="#e30613"/>
      <line x1="${x}" y1="${y}" x2="${x+20}" y2="${y-10}" stroke="#e30613" stroke-width="2"/>
      <line x1="${x+20}" y1="${y-10}" x2="${x+40}" y2="${y+5}" stroke="#e30613" stroke-width="2"/>
      <line x1="${x}" y1="${y}" x2="${x+40}" y2="${y+5}" stroke="#e30613" stroke-width="2"/>
    `;
  }

  private getIndustryColor(industry: string): string {
    const colors: { [key: string]: string } = {
      'retail': 'e30613',
      'education': '2E7D32',
      'healthcare': '1976D2',
      'finance': '7B1FA2',
      'manufacturing': 'F57C00',
      'government': '5D4037',
      'hospitality': 'C62828',
      'logistics': '2E7D32',
      'real_estate': '795548',
      'tech_telecom': 'e30613'
    };
    
    return colors[industry] || 'e30613';
  }

  // Generate different types of images
  async generateBrochureImage(request: ChinchillaRequest): Promise<ChinchillaResponse> {
    return this.generateImage({ ...request, contentType: 'brochure' });
  }

  async generateInfographicImage(request: ChinchillaRequest): Promise<ChinchillaResponse> {
    return this.generateImage({ ...request, contentType: 'infographic' });
  }

  async generatePresentationImage(request: ChinchillaRequest): Promise<ChinchillaResponse> {
    return this.generateImage({ ...request, contentType: 'presentation' });
  }
}

export const chinchillaImageAI = new ChinchillaImageAI();
