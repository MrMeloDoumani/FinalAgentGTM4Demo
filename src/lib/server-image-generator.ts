// Server-side image generator using simple text-to-image approach
export interface ImageGenerationRequest {
  title: string;
  industry: string;
  elements: string[];
  branding: string;
  style: string;
}

export interface GeneratedImage {
  id: string;
  title: string;
  type: string;
  industry: string;
  fileUrl: string;
  content: string;
  generatedAt: string;
  styleUsed: string;
}

export class ServerImageGenerator {
  private generateId(): string {
    return `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private escapeXml(input: string): string {
    return input
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }

  async generateImage(request: ImageGenerationRequest): Promise<GeneratedImage> {
    console.log('ðŸŽ¨ Server Image Generator: Creating image for:', request.title);
    
    // Create a simple HTML-based image representation
    const htmlContent = this.generateHTMLImage(request);
    
    // For now, return a placeholder image URL that will work
    // In production, you'd use a service like Puppeteer to convert HTML to image
    const imageId = this.generateId();
    const generatedAt = new Date().toISOString();
    
    // Create a simple data URL with a placeholder image
    const placeholderImage = this.createPlaceholderImage(request);
    
    console.log('âœ… Server Image Generator: Image created successfully');
    
    return {
      id: imageId,
      title: request.title,
      type: 'image',
      industry: request.industry,
      fileUrl: placeholderImage,
      content: `Generated ${request.title} for ${request.industry} industry`,
      generatedAt,
      styleUsed: request.style || 'e& Professional'
    };
  }

  private generateHTMLImage(request: ImageGenerationRequest): string {
    const elements = request.elements.map(el => `<div class="element">${el}</div>`).join('');
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            width: 800px;
            height: 600px;
          }
          .header {
            background: #e30613;
            color: white;
            padding: 20px;
            text-align: left;
            border-radius: 10px 10px 0 0;
          }
          .logo { font-size: 32px; font-weight: bold; }
          .subtitle { font-size: 18px; margin-top: 5px; }
          .content {
            background: white;
            padding: 30px;
            border: 2px solid #e30613;
            border-top: none;
            height: 400px;
          }
          .title {
            font-size: 24px;
            font-weight: bold;
            color: #e30613;
            text-align: center;
            margin-bottom: 20px;
          }
          .elements {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin: 30px 0;
          }
          .element {
            background: #e8f4fd;
            border: 2px solid #e30613;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            min-width: 100px;
            font-weight: bold;
            color: #e30613;
          }
          .footer {
            background: #f8f9fa;
            padding: 15px;
            text-align: center;
            color: #666;
            border-radius: 0 0 10px 10px;
            border: 2px solid #e30613;
            border-top: none;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">e&</div>
          <div class="subtitle">${request.industry.toUpperCase()} SOLUTIONS</div>
        </div>
        <div class="content">
          <div class="title">${request.title}</div>
          <div class="elements">${elements}</div>
        </div>
        <div class="footer">
          Generated by Jammy AI for e& B2B Solutions
        </div>
      </body>
      </html>
    `;
  }

  private createPlaceholderImage(request: ImageGenerationRequest): string {
    // Create a simple SVG placeholder that will actually display
    const width = 800;
    const height = 600;
    const brandColor = '#e30613';
    const titleText = this.escapeXml(request.title);
    const industryText = this.escapeXml(request.industry.toUpperCase());
    
    // Create a simple SVG with the product information
    const svg = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="${width}" height="${height}" fill="#f8f9fa"/>
        
        <!-- Header -->
        <rect x="0" y="0" width="${width}" height="80" fill="${brandColor}"/>
        <text x="50" y="50" font-family="Arial, sans-serif" font-size="32" font-weight="bold" fill="#ffffff">e&amp;</text>
        <text x="120" y="50" font-family="Arial, sans-serif" font-size="18" fill="#ffffff">${industryText} SOLUTIONS</text>
        
        <!-- Content Box -->
        <rect x="50" y="100" width="${width - 100}" height="${height - 200}" fill="#ffffff" stroke="${brandColor}" stroke-width="2" rx="10"/>
        
        <!-- Title -->
        <text x="${width / 2}" y="150" text-anchor="middle" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="${brandColor}">${titleText}</text>
        
        <!-- Elements -->
        ${request.elements.map((element, index) => {
          const x = 150 + (index % 3) * 200;
          const y = 200 + Math.floor(index / 3) * 120;
          const label = this.escapeXml(element.replace('_', ' ').toUpperCase());
          return `
            <rect x="${x}" y="${y}" width="120" height="80" fill="#e8f4fd" stroke="${brandColor}" stroke-width="2" rx="5"/>
            <text x="${x + 60}" y="${y + 45}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="${brandColor}">${label}</text>
          `;
        }).join('')}
        
        <!-- Footer -->
        <rect x="0" y="${height - 60}" width="${width}" height="60" fill="#f8f9fa" stroke="${brandColor}" stroke-width="1"/>
        <text x="${width / 2}" y="${height - 30}" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" fill="#666">Generated by Jammy AI for e&amp; B2B Solutions</text>
        <text x="${width / 2}" y="${height - 15}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#999">Professional Business Visualization</text>
      </svg>
    `;
    
    // Convert to base64 data URL
    const base64 = Buffer.from(svg).toString('base64');
    return `data:image/svg+xml;base64,${base64}`;
  }
}

// Export singleton instance
export const serverImageGenerator = new ServerImageGenerator();