// Server-side image generator using simple text-to-image approach
export interface ImageGenerationRequest {
  title: string;
  industry: string;
  elements: string[];
  branding: string;
  style: string;
}

export interface GeneratedImage {
  id: string;
  title: string;
  type: string;
  industry: string;
  fileUrl: string;
  content: string;
  generatedAt: string;
  styleUsed: string;
}

export class ServerImageGenerator {
  private generateId(): string {
    return `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private escapeXml(input: string): string {
    return input
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }

  async generateImage(request: ImageGenerationRequest): Promise<GeneratedImage> {
    console.log('ðŸŽ¨ Server Image Generator: Creating image for:', request.title);
    
    // Create a simple HTML-based image representation
    const htmlContent = this.generateHTMLImage(request);
    
    // For now, return a placeholder image URL that will work
    // In production, you'd use a service like Puppeteer to convert HTML to image
    const imageId = this.generateId();
    const generatedAt = new Date().toISOString();
    
    // Create a simple data URL with a placeholder image
    const placeholderImage = this.createPlaceholderImage(request);
    
    console.log('âœ… Server Image Generator: Image created successfully');
    
    return {
      id: imageId,
      title: request.title,
      type: 'image',
      industry: request.industry,
      fileUrl: placeholderImage,
      content: `Generated ${request.title} for ${request.industry} industry`,
      generatedAt,
      styleUsed: request.style || 'e& Professional'
    };
  }

  private generateHTMLImage(request: ImageGenerationRequest): string {
    const elements = request.elements.map(el => `<div class="element">${el}</div>`).join('');
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            width: 800px;
            height: 600px;
          }
          .header {
            background: #e30613;
            color: white;
            padding: 20px;
            text-align: left;
            border-radius: 10px 10px 0 0;
          }
          .logo { font-size: 32px; font-weight: bold; }
          .subtitle { font-size: 18px; margin-top: 5px; }
          .content {
            background: white;
            padding: 30px;
            border: 2px solid #e30613;
            border-top: none;
            height: 400px;
          }
          .title {
            font-size: 24px;
            font-weight: bold;
            color: #e30613;
            text-align: center;
            margin-bottom: 20px;
          }
          .elements {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
            margin: 30px 0;
          }
          .element {
            background: #e8f4fd;
            border: 2px solid #e30613;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            min-width: 100px;
            font-weight: bold;
            color: #e30613;
          }
          .footer {
            background: #f8f9fa;
            padding: 15px;
            text-align: center;
            color: #666;
            border-radius: 0 0 10px 10px;
            border: 2px solid #e30613;
            border-top: none;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">e&</div>
          <div class="subtitle">${request.industry.toUpperCase()} SOLUTIONS</div>
        </div>
        <div class="content">
          <div class="title">${request.title}</div>
          <div class="elements">${elements}</div>
        </div>
        <div class="footer">
          Generated by Jammy AI for e& B2B Solutions
        </div>
      </body>
      </html>
    `;
  }

  private createPlaceholderImage(request: ImageGenerationRequest): string {
    // Sophisticated SVG with gradients, shadows, badges, icons and grid layout
    const width = 1024;
    const height = 768;
    const brand = '#e30613';
    const brandDark = '#b1050f';
    const neutralBg = '#f6f7f9';
    const titleText = this.escapeXml(request.title || 'Business Solution');
    const industryText = this.escapeXml((request.industry || 'tech_telecom').replace(/_/g, ' ').toUpperCase());

    // Build element cards (max 6 shown)
    const safeElements = (request.elements && request.elements.length > 0)
      ? request.elements.slice(0, 6)
      : ['office_building','network','router','wifi_signal'];

    const elementCard = (label: string, cx: number, cy: number) => {
      const text = this.escapeXml(label.replace('_',' ').toUpperCase());
      // simple icon per element
      const icon = (() => {
        switch (label) {
          case 'office_building':
            return `<rect x="${cx-38}" y="${cy-22}" width="76" height="44" rx="6" fill="#ffffff"/><g stroke="${brand}" stroke-width="2" fill="none"><rect x="${cx-28}" y="${cy-16}" width="16" height="10"/><rect x="${cx-8}" y="${cy-16}" width="16" height="10"/><rect x="${cx+12}" y="${cy-16}" width="16" height="10"/></g>`;
          case 'network':
            return `<g stroke="${brand}" stroke-width="2" fill="none"><circle cx="${cx}" cy="${cy}" r="18"/><line x1="${cx-18}" y1="${cy}" x2="${cx+18}" y2="${cy}"/><line x1="${cx}" y1="${cy-18}" x2="${cx}" y2="${cy+18}"/></g>`;
          case 'router':
            return `<rect x="${cx-28}" y="${cy-14}" width="56" height="28" rx="6" fill="#fff" stroke="${brand}" stroke-width="2"/><g stroke="${brand}" stroke-width="2"><line x1="${cx-16}" y1="${cy-14}" x2="${cx-16}" y2="${cy-28}"/><line x1="${cx+16}" y1="${cy-14}" x2="${cx+16}" y2="${cy-28}"/></g>`;
          case 'wifi_signal':
            return `<g stroke="${brand}" stroke-width="2" fill="none"><path d="M ${cx-18} ${cy+10} Q ${cx} ${cy-4} ${cx+18} ${cy+10}"/><path d="M ${cx-12} ${cy+6} Q ${cx} ${cy-2} ${cx+12} ${cy+6}"/><circle cx="${cx}" cy="${cy+12}" r="3" fill="${brand}"/></g>`;
          case 'server':
            return `<g stroke="${brand}" stroke-width="2" fill="#fff"><rect x="${cx-24}" y="${cy-18}" width="48" height="36" rx="6"/><rect x="${cx-20}" y="${cy-12}" width="40" height="6"/><rect x="${cx-20}" y="${cy}" width="40" height="6"/></g>`;
          default:
            return `<circle cx="${cx}" cy="${cy}" r="18" fill="#fff" stroke="${brand}" stroke-width="2"/>`;
        }
      })();
      return `
        <g filter="url(#shadow-sm)">
          <rect x="${cx-110}" y="${cy-90}" width="220" height="180" rx="14" fill="#ffffff"/>
          <rect x="${cx-110}" y="${cy-90}" width="220" height="180" rx="14" fill="url(#cardGrad)" opacity="0.55"/>
          <g transform="translate(0,0)">${icon}</g>
          <text x="${cx}" y="${cy+48}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="${brand}">${text}</text>
        </g>
      `;
    };

    const grid = () => {
      const cols = 3;
      const startX = 190;
      const startY = 300;
      const hGap = 280;
      const vGap = 220;
      return safeElements.map((el, i) => {
        const col = i % cols;
        const row = Math.floor(i / cols);
        const cx = startX + col * hGap;
        const cy = startY + row * vGap;
        return elementCard(el, cx, cy);
      }).join('');
    };

    const badges = () => {
      const style = this.escapeXml((request.style || 'professional_b2b').replace(/_/g, ' '));
      return `
        <g>
          <rect x="60" y="120" rx="12" ry="12" width="150" height="30" fill="#fee2e2"/>
          <text x="135" y="140" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="${brand}">IMAGE</text>
          <rect x="220" y="120" rx="12" ry="12" width="220" height="30" fill="#e6f0ff"/>
          <text x="330" y="140" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#2b4c7e">${this.escapeXml(request.industry || 'tech_telecom')}</text>
          <rect x="450" y="120" rx="12" ry="12" width="250" height="30" fill="#f0fdf4"/>
          <text x="575" y="140" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#166534">${style}</text>
        </g>`;
    };

    const svg = `
      <svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="bgGrad" x1="0" y1="0" x2="1" y2="1">
            <stop offset="0%" stop-color="#ffffff"/>
            <stop offset="100%" stop-color="${neutralBg}"/>
          </linearGradient>
          <linearGradient id="brandGrad" x1="0" y1="0" x2="1" y2="0">
            <stop offset="0%" stop-color="${brand}"/>
            <stop offset="100%" stop-color="${brandDark}"/>
          </linearGradient>
          <linearGradient id="cardGrad" x1="0" y1="0" x2="0" y2="1">
            <stop offset="0%" stop-color="#ffffff"/>
            <stop offset="100%" stop-color="#f3f4f6"/>
          </linearGradient>
          <filter id="shadow-sm" x="-30%" y="-30%" width="160%" height="160%">
            <feDropShadow dx="0" dy="2" stdDeviation="3" flood-color="#000" flood-opacity="0.15"/>
          </filter>
        </defs>

        <!-- Background with soft shapes -->
        <rect width="${width}" height="${height}" fill="url(#bgGrad)"/>
        <circle cx="${width-120}" cy="90" r="70" fill="${brand}" opacity="0.08"/>
        <circle cx="120" cy="${height-120}" r="90" fill="${brand}" opacity="0.06"/>

        <!-- Header Brand Bar -->
        <rect x="0" y="0" width="${width}" height="88" fill="url(#brandGrad)"/>
        <text x="56" y="54" font-family="Arial, sans-serif" font-size="36" font-weight="bold" fill="#ffffff">e&amp;</text>
        <text x="120" y="54" font-family="Arial, sans-serif" font-size="18" fill="#ffffff" opacity="0.95">${industryText} SOLUTIONS</text>

        <!-- Title -->
        <text x="${width/2}" y="120" text-anchor="middle" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="${brand}">${titleText}</text>

        ${badges()}

        <!-- Canvas frame -->
        <g filter="url(#shadow-sm)">
          <rect x="40" y="160" width="${width-80}" height="${height-240}" rx="18" fill="#ffffff"/>
        </g>

        <!-- Grid of element cards -->
        ${grid()}

        <!-- Footer -->
        <text x="${width/2}" y="${height-40}" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6b7280">Generated by Jammy AI for e&amp; B2B</text>
      </svg>
    `;
    
    // Convert to base64 data URL
    const base64 = Buffer.from(svg).toString('base64');
    return `data:image/svg+xml;base64,${base64}`;
  }
}

// Export singleton instance
export const serverImageGenerator = new ServerImageGenerator();