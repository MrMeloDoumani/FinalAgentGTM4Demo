import { StylePattern } from './eand-brand-guidelines';

export interface GeneratedImage {
  id: string;
  url: string;
  title: string;
  industry: string;
  type: string;
  generatedAt: string;
  styleUsed: string;
}

class SimpleImageGenerator {
  async generateDocumentImage(
    content: string, 
    industry: string, 
    stylePattern: StylePattern
  ): Promise<GeneratedImage> {
    // Create a simple SVG image based on the content and style
    const svg = this.createSVGImage(content, industry, stylePattern);
    // Use base64 encoding for better compatibility
    const base64Svg = btoa(unescape(encodeURIComponent(svg)));
    const dataUrl = `data:image/svg+xml;base64,${base64Svg}`;
    
    return {
      id: `img_${Date.now()}`,
      url: dataUrl,
      title: `${industry} Visual Content`,
      industry: industry,
      type: 'document',
      generatedAt: new Date().toISOString(),
      styleUsed: stylePattern.name
    };
  }

  private createSVGImage(content: string, industry: string, style: StylePattern): string {
    const colors = style.colors;
    const typography = style.typography;
    const layout = style.layout;
    
    // Extract key information from content
    const lines = content.split('\n').filter(line => line.trim().length > 0);
    const title = lines[0] || `${industry} Solution`;
    const subtitle = lines[1] || 'e& Business Solutions';
    const description = lines.slice(2, 5).join(' ') || 'Transform your business with e& digital solutions';
    
    // Create SVG with e& branding and learned style
    const svg = `
      <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
        <!-- Background -->
        <rect width="400" height="300" fill="${colors.background || '#FFFFFF'}"/>
        
        <!-- Header with e& branding -->
        <rect x="0" y="0" width="400" height="60" fill="${colors.primary || '#6100ED'}"/>
        <text x="20" y="35" font-family="${typography.heading || 'Arial, sans-serif'}" 
              font-size="18" font-weight="bold" fill="${colors.secondary || '#02D9C7'}">
          e& (Etisalat)
        </text>
        <text x="20" y="50" font-family="${typography.primary || 'Arial, sans-serif'}" 
              font-size="12" fill="${colors.secondary || '#02D9C7'}">
          Business Solutions
        </text>
        
        <!-- Main content area -->
        <rect x="20" y="80" width="360" height="180" fill="${colors.background || '#FFFFFF'}" 
              stroke="${colors.primary || '#6100ED'}" stroke-width="2" rx="${layout.borderRadius || 8}"/>
        
        <!-- Title -->
        <text x="40" y="110" font-family="${typography.heading || 'Arial, sans-serif'}" 
              font-size="${typography.sizes?.large || 16}" font-weight="bold" 
              fill="${colors.text || '#1A1A1A'}">
          ${this.truncateText(title, 40)}
        </text>
        
        <!-- Subtitle -->
        <text x="40" y="130" font-family="${typography.primary || 'Arial, sans-serif'}" 
              font-size="${typography.sizes?.medium || 14}" 
              fill="${colors.lightText || '#666666'}">
          ${subtitle}
        </text>
        
        <!-- Description -->
        <text x="40" y="150" font-family="${typography.primary || 'Arial, sans-serif'}" 
              font-size="${typography.sizes?.small || 12}" 
              fill="${colors.text || '#1A1A1A'}">
          ${this.truncateText(description, 50)}
        </text>
        
        <!-- Industry indicator -->
        <rect x="40" y="170" width="80" height="25" fill="${colors.accent || '#FF6B35'}" 
              rx="4"/>
        <text x="50" y="185" font-family="${typography.primary || 'Arial, sans-serif'}" 
              font-size="10" font-weight="bold" fill="white">
          ${industry.toUpperCase()}
        </text>
        
        <!-- e& logo area -->
        <circle cx="320" cy="200" r="25" fill="${colors.primary || '#6100ED'}"/>
        <text x="310" y="205" font-family="${typography.heading || 'Arial, sans-serif'}" 
              font-size="16" font-weight="bold" fill="white">
          e&
        </text>
        
        <!-- Footer -->
        <text x="20" y="280" font-family="${typography.primary || 'Arial, sans-serif'}" 
              font-size="10" fill="${colors.lightText || '#666666'}">
          Generated by Jammy AI â€¢ ${new Date().toLocaleDateString()}
        </text>
      </svg>
    `;
    
    return svg;
  }

  private truncateText(text: string, maxLength: number): string {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - 3) + '...';
  }

  // Generate different types of images
  async generateBrochureImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }

  async generateInfographicImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }

  async generatePresentationImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }
}

export const simpleImageGenerator = new SimpleImageGenerator();
