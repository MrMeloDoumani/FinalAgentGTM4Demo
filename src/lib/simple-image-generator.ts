import { StylePattern } from './eand-brand-guidelines';

export interface GeneratedImage {
  id: string;
  url: string;
  title: string;
  industry: string;
  type: string;
  generatedAt: string;
  styleUsed: string;
}

class SimpleImageGenerator {
  async generateDocumentImage(
    content: string, 
    industry: string, 
    stylePattern: StylePattern
  ): Promise<GeneratedImage> {
    // Create a simple SVG image based on the content and style
    const svg = this.createSVGImage(content, industry, stylePattern);
    // Use base64 encoding which is more reliable
    const base64Svg = Buffer.from(svg).toString('base64');
    const dataUrl = `data:image/svg+xml;base64,${base64Svg}`;
    
    return {
      id: `img_${Date.now()}`,
      url: dataUrl,
      title: `${industry} Visual Content`,
      industry: industry,
      type: 'document',
      generatedAt: new Date().toISOString(),
      styleUsed: stylePattern.name
    };
  }

  private createSVGImage(content: string, industry: string, style: StylePattern): string {
    const colors = style.colors;
    const typography = style.typography;
    
    // Create a simple, clean SVG with e& branding
    const svg = `<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
      <rect width="400" height="300" fill="#FFFFFF"/>
      <rect x="0" y="0" width="400" height="60" fill="#e30613"/>
      <text x="20" y="35" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="white">e& (Etisalat)</text>
      <text x="20" y="50" font-family="Arial, sans-serif" font-size="12" fill="white">Business Solutions</text>
      <rect x="20" y="80" width="360" height="180" fill="#FFFFFF" stroke="#e30613" stroke-width="2" rx="8"/>
      <text x="40" y="110" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="#1A1A1A">${industry.charAt(0).toUpperCase() + industry.slice(1)} Industry Brochure</text>
      <text x="40" y="130" font-family="Arial, sans-serif" font-size="14" fill="#666666">Transform your business with e& digital solutions</text>
      <text x="40" y="150" font-family="Arial, sans-serif" font-size="12" fill="#1A1A1A">Comprehensive ICT solutions for ${industry} sector</text>
      <rect x="40" y="170" width="80" height="25" fill="#e30613" rx="4"/>
      <text x="50" y="185" font-family="Arial, sans-serif" font-size="10" font-weight="bold" fill="white">${industry.toUpperCase()}</text>
      <circle cx="320" cy="200" r="25" fill="#e30613"/>
      <text x="310" y="205" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="white">e&</text>
      <text x="20" y="280" font-family="Arial, sans-serif" font-size="10" fill="#666666">Generated by Jammy AI â€¢ ${new Date().toLocaleDateString()}</text>
    </svg>`;
    
    return svg;
  }

  private truncateText(text: string, maxLength: number): string {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - 3) + '...';
  }

  // Generate different types of images
  async generateBrochureImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }

  async generateInfographicImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }

  async generatePresentationImage(content: string, industry: string, style: StylePattern): Promise<GeneratedImage> {
    return this.generateDocumentImage(content, industry, style);
  }
}

export const simpleImageGenerator = new SimpleImageGenerator();
